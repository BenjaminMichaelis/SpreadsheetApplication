# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:

    #strategy:
      # matrix:
       # configuration: [Debug, Release]
       # targetplatform: [x86, x64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: SpreadsheetApplication.sln
      Test_Project_Path: SpreadsheetApp.Tests\SpreadsheetApp.Tests.csproj
      Wap_Project_Directory: WindowsPackagingProject
      Wap_Project_Path: WindowsPackagingProject\WindowsPackagingProject.wapproj
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    # Create my own version number with a specific format using date. ex: 2020.805.1.0
    - uses: Amadevus/pwsh-script@v2
      id: version-creator
      with:
        script: |
          $buildDay = Get-Date -Format "yyyy.Mdd"
          $ver = $buildDay + "." + $env:GITHUB_RUN_NUMBER + ".0"
          Set-ActionVariable APP_VERSION $ver
          
    # Update the appxmanifest for SideLoad (and signing with PFX)
    - name: Update manifest version
      run: |
        $maifestPath = Join-Path -Path $env:Wap_Project_Directory -ChildPath Package.appxmanifest
        [xml]$manifest = get-content "$maifestPath"
        $manifest.Package.Identity.Version = "$env:APP_VERSION"
        $manifest.Package.Identity.Name = $env:PackageIdentity_Name
        $manifest.Package.Identity.Publisher = $env:PackageIdentity_Publisher
        $manifest.Package.Properties.DisplayName = $env:PackageProperties_DisplayName
        $manifest.Package.Properties.PublisherDisplayName = $env:PackageProperties_PublisherDisplayName
        $manifest.Package.Applications.Application.VisualElements.DisplayName = $env:ApplicationVisualElements_DisplayName
        $manifest.save("$maifestPath")
      env:
        PackageIdentity_Name: "BenjaminMichaelis.SpreadsheetApplication"
        PackageIdentity_Publisher: "CN='Benjamin Michaelis', S=Washington, C=US"
        PackageProperties_DisplayName: "Spreadsheet Application"
        PackageProperties_PublisherDisplayName: "Benjamin Michaelis"
        ApplicationVisualElements_DisplayName: "Spreadsheet Application"
        
    # Updates the WPF project's assembly version number.
    - name: Update WPF Assembly version
      run: |
        function SetAssemblyFileVersion([string]$pathToFile, [string]$newVersion) {
          $newFile = Get-Content $pathToFile -encoding "UTF8" | foreach-object {
            if ($_.StartsWith("[assembly: AssemblyFileVersion")) {
              $verStart = $_.IndexOf("(")
              $verEnd = $_.IndexOf(")", $verStart)
              $origVersion = $_.SubString($verStart+2, $verEnd-$verStart-3)
              $newVersion = "$env:APP_VERSION"
              write-host "Setting AssemblyFileVersion from $origVersion to $newVersion"
              $_.Replace($origVersion, $newVersion)
            }  else {
              $_
            } 
          }
          $newfile | Set-Content $assemblyInfoPath -encoding "UTF8"
        }
        $assemblyInfoPath = "Spreadsheet\Properties\AssemblyInfo(Framework).cs"
        SetAssemblyFileVersion $assemblyInfoPath $env:APP_VERSION

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      
    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath $env:SigningCertificate
        dir
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
      env:
        SigningCertificate: BenjaminMichaelis.pfx # For UWP package signing

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: Release
      
      # In order to generate project.assets.json, we need to use nuget.exe for the wapproject
    - name: Run 'nuget restore' for Packaging Project (to ensure assets.json is available)
      run: nuget restore WindowsPackagingProject\WindowsPackagingProject.wapproj
        
      # Restore the WPF project to restore the OBJ folder
    - name: Restore the Wpf application to populate the obj folder
      run: msbuild $env:WpfProjectPath /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RID
      env:
        RID: win-x86
        Configuration: Release
        WpfProjectPath: Spreadsheet\Spreadsheet.csproj
       
   # TODO: Reinstate tests before merge
    # Execute all unit tests in the solution
    # - name: Execute unit tests
   # run: dotnet test

    - name: Create the app package
      run: msbuild $env:Solution_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=BenjaminMichaelis.pfx /p:PackageCertificatePassword=$env:CertPrivateKey
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86
        Appx_Package_Build_Mode: SideloadOnly
        Configuration: Release
        SigningCertificate: BenjaminMichaelis.pfx
        CertPrivateKey: ${{ secrets.Pfx_Key }}

    # Remove the pfx
    - name: Remove the pfx
      run: |
        dir $env:Wap_Project_Directory
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath $env:SigningCertificate
        Remove-Item $certificatePath
      env:
        SigningCertificate: BenjaminMichaelis.pfx # For UWP package signing

    # ZIP up the sideload packages for GitHub release using Powershell
    - name: Create SideLoadPackages.zip
      run: Compress-Archive -Path ${{ env.Wap_Project_Directory }}\AppPackages\* -DestinationPath ${{ env.Wap_Project_Directory }}\AppPackages\SideLoadPackages.zip

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
        
    # Create a new GitHub Release tagged with the build version number (via https://github.com/actions/create-release)
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.${{ env.APP_VERSION }}
        release_name: Spreadsheet Application v.${{ env.APP_VERSION }}
        draft: True
        prerelease: True
        body_path: README.md


   # Add SideLoad artifacts to GitHub Release (via https://github.com/actions/upload-release-asset)
    - name: Uploading SideLoad Release asset
      id: upload-sideload-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.Wap_Project_Directory }}\AppPackages\SideLoadPackages.zip
        asset_name: SideLoadPackages.zip
        asset_content_type: application/zip
