name: Release (sideload)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    env:
      Solution_Name: SpreadsheetApplication.sln
      Test_Project_Path: SpreadsheetApp.Tests\SpreadsheetApp.Tests.csproj
      Wap_Project_Directory: WindowsPackagingProject
      Wap_Project_Path: WindowsPackagingProject\WindowsPackagingProject.wapproj

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # ******************| ASSEMBLY AND MANIFEST VERSIONING |********************* #

    # Create my own version number with a specific format using date. ex: 2020.805.1.0
    - uses: Amadevus/pwsh-script@v2
      id: version-creator
      with:
        script: |
          $buildDay = Get-Date -Format "yyyy.Mdd"
          $ver = $buildDay + "." + $env:GITHUB_RUN_NUMBER + ".0"
          Set-ActionVariable APP_VERSION $ver

    # Update the appxmanifest for SideLoad (and signing with PFX)
    - name: Update manifest version
      run: |
        $maifestPath = Join-Path -Path $env:Wap_Project_Directory -ChildPath Package.appxmanifest
        [xml]$manifest = get-content "$maifestPath"
        $manifest.Package.Identity.Version = "$env:APP_VERSION"
        $manifest.Package.Identity.Name = $env:PackageIdentity_Name
        $manifest.Package.Identity.Publisher = $env:PackageIdentity_Publisher
        $manifest.Package.Properties.DisplayName = $env:PackageProperties_DisplayName
        $manifest.Package.Properties.PublisherDisplayName = $env:PackageProperties_PublisherDisplayName
        $manifest.Package.Applications.Application.VisualElements.DisplayName = $env:ApplicationVisualElements_DisplayName
        $manifest.save("$maifestPath")
      env:
        PackageIdentity_Name: "BenjaminMichaelis.SpreadsheetApplication"
        PackageIdentity_Publisher: "CN='Benjamin Michaelis', S=Washington, C=US"
        PackageProperties_DisplayName: "Spreadsheet Application"
        PackageProperties_PublisherDisplayName: "Benjamin Michaelis"
        ApplicationVisualElements_DisplayName: "Spreadsheet Application"

    # Updates the WPF project's assembly version number.
    - name: Update WPF Assembly version
      run: |
        function SetAssemblyFileVersion([string]$pathToFile, [string]$newVersion) {
          $newFile = Get-Content $pathToFile -encoding "UTF8" | foreach-object {
            if ($_.StartsWith("[assembly: AssemblyFileVersion")) {
              $verStart = $_.IndexOf("(")
              $verEnd = $_.IndexOf(")", $verStart)
              $origVersion = $_.SubString($verStart+2, $verEnd-$verStart-3)
              $newVersion = "$env:APP_VERSION"
              write-host "Setting AssemblyFileVersion from $origVersion to $newVersion"
              $_.Replace($origVersion, $newVersion)
            }  else {
              $_
            }
          }
          $newfile | Set-Content $assemblyInfoPath -encoding "UTF8"
        }
        $assemblyInfoPath = "Spreadsheet\Properties\AssemblyInfo(Framework).cs"
        SetAssemblyFileVersion $assemblyInfoPath $env:APP_VERSION

    # ******************| RESTORE DEPENDENCIES AND INSTALL TOOLS REQUIRED |********************* #

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: Release

    # In order to generate project.assets.json, we need to use nuget.exe for the wapproject
    - name: Run 'nuget restore' for Packaging Project (to ensure assets.json is available)
      run: nuget restore WindowsPackagingProject\WindowsPackagingProject.wapproj

    # Restore the WPF project to restore the OBJ folder
    - name: Restore the Wpf application to populate the obj folder
      run: msbuild $env:WpfProjectPath /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RID
      env:
        RID: win-x86
        Configuration: Release
        WpfProjectPath: Spreadsheet\Spreadsheet.csproj

    # ************************| BUILD AND CREATE PACKAGE |************************ #

    # Build using SideLoad
    - name: Create the app package
      run: msbuild $env:Solution_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86
        Appx_Package_Build_Mode: SideloadOnly
        Configuration: Release

    # ZIP up the sideload packages for GitHub release using Powershell
    - name: Create SideLoadPackages.zip
      run: Compress-Archive -Path ${{ env.Wap_Project_Directory }}\AppPackages\* -DestinationPath ${{ env.Wap_Project_Directory }}\AppPackages\SideLoadPackages.zip

    # ************************| ARTIFACT AND GITHUB RELEASE |************************ #

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages

    # Create a new GitHub Release tagged with the build version number (via https://github.com/actions/create-release)
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.${{ env.APP_VERSION }}
        release_name: Spreadsheet Application v.${{ env.APP_VERSION }}
        draft: True
        prerelease: True
        body_path: README.md

   # Add SideLoad artifacts to GitHub Release (via https://github.com/actions/upload-release-asset)
    - name: Uploading SideLoad Release asset
      id: upload-sideload-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.Wap_Project_Directory }}\AppPackages\SideLoadPackages.zip
        asset_name: SideLoadPackages.zip
        asset_content_type: application/zip
